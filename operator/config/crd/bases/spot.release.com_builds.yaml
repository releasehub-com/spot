---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.11.3
  creationTimestamp: null
  name: builds.spot.release.com
spec:
  group: spot.release.com
  names:
    kind: Build
    listKind: BuildList
    plural: builds
    singular: build
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.stage
      name: Stage
      type: string
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: Build is the Schema for the builds API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            properties:
              default_image_tag:
                description: Defaults to this tag if the Image doesn't have one set.
                  It is usually set by the workspace
                type: string
              image:
                description: Information about the image that's going to be built
                  For an image to be succesfully built, it needs to have a RegistrySpec
                  associated with it.
                properties:
                  name:
                    description: Name of the image. If the image is not an official
                      one and a URL needs to be provided, `RegistrySpec` needs to
                      provide that URL.
                    type: string
                  registry:
                    description: Registry is where all the information for the container
                      registry lives. It needs to be properly configured for the build
                      to be pushed successfully. A build is pushed to the registry
                      only if the `RepositoryContext` exists with this `Registry`
                    properties:
                      type:
                        description: 'TODO: Not sure this is the way to go, might
                          replace it'
                        type: string
                      url:
                        type: string
                    required:
                    - type
                    - url
                    type: object
                  repository_context:
                    description: RepositoryContext information is passed down to buildkit
                      as instruction on how to proceed with the repository. The image
                      will be build from source if the `RepositoryContext` is set.
                    properties:
                      dockerfile:
                        description: Location of your Dockerfile within the repository.
                        type: string
                      path:
                        description: Path is what docker calls `context`. It's the
                          location for the content of your build within the repository.
                        type: string
                    required:
                    - dockerfile
                    - path
                    type: object
                  tag:
                    description: Tag is what will be used to tag the image once it's
                      pushed to the container's registry (ecr, etc.) If no tag is
                      set, it will use the workspace tag This can be useful if a workspace
                      builds multiple images and each of the images will be tagged
                      the same value.
                    type: string
                required:
                - name
                type: object
              repo_url:
                description: RepositoryURL is the URL of the repository it plans to
                  build
                type: string
            required:
            - default_image_tag
            type: object
          status:
            description: BuildStatus defines the observed state of Build
            properties:
              image:
                description: The Image will store information about the image that
                  was created by this build. This value is nil until the stage reaches
                  BuildStageDone
                properties:
                  digest:
                    type: string
                  url:
                    type: string
                type: object
              pod:
                description: The Pod that will run the build logic It will be in charge
                  of updating the status of this Build and store the BuildImage when
                  the image is ready.
                properties:
                  name:
                    description: '`name` is the name of the pod. Required'
                    type: string
                  namespace:
                    description: '`namespace` is the namespace of the pod. Required'
                    type: string
                required:
                - name
                - namespace
                type: object
              stage:
                enum:
                - Running
                - Done
                - Errored
                type: string
            required:
            - stage
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
